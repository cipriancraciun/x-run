#!/dev/null




<< x-run
	"${X_RUN[@]}" ':: go / build / main / debug'
	export -n -- X_RUN_INSIDE X_RUN_COMMAND X_RUN_TRACE
	export -n -- XRUN_SOURCE XRUN_LIBRARY XRUN_EXECUTABLE XRUN_CACHE XRUN_TERM XRUN_ACTION
	if test -n "${XRUNDEV_SOURCE:-}" ; then
		export -- XRUN_SOURCE="${XRUNDEV_SOURCE:-}"
		export -n -- XRUNDEV_SOURCE
	fi
	exec -- ./.outputs/main-debug.elf "${@}"
!!

<< x-run / 0
	test "${#}" -ge 1
	"${X_RUN[@]}" ':: go / build / main / debug'
	export -n -- X_RUN_INSIDE X_RUN_COMMAND X_RUN_TRACE
	exec -a "${1}" -- ./.outputs/main-debug.elf "${@:2}"
!!

:: x-run / execute :: exec -- "${X_RUN[@]}" ':: x-run' execute "${@}"
:: x-run / script :: exec -- "${X_RUN[@]}" ':: x-run' export-script "${@}"
:: x-run / list :: exec -- "${X_RUN[@]}" ':: x-run' export-labels "${@}"
:: x-run / select :: exec -- "${X_RUN[@]}" ':: x-run' select-label "${@}"
:: x-run / export-json :: exec -- "${X_RUN[@]}" ':: x-run' export-library-json "${@}"
:: x-run / export-cdb :: exec -- "${X_RUN[@]}" ':: x-run' export-library-cdb "${@}"
:: x-run / parse :: exec -- "${X_RUN[@]}" ':: x-run' parse-library "${@}"
:: x-run / fzf :: exec -- "${X_RUN[@]}" ':: x-run / 0' '[x-run:select]' "${@}"

:: x-run / use / workspace :: export -- XRUNDEV_SOURCE=./.x-run
:: x-run / use / photos :: export -- XRUNDEV_SOURCE=./examples/photos.x-run
:: x-run / use / desktop :: export -- XRUNDEV_SOURCE=./examples/desktop.x-run
:: x-run / use / vonuvoli :: export -- XRUNDEV_SOURCE=./examples/vonuvoli.x-run




<< go / build / main / debug
	test "${#}" -eq 0
	exec -- "${X_RUN[@]}" ':: go / tool' \
			build \
			-v \
			-o ./.outputs/main-debug.elf \
			-- \
			./sources/main.go \
	#
!!

<< go / build / main / release
	test "${#}" -eq 0
	exec -- "${X_RUN[@]}" ':: go / tool' \
			build \
			-v \
			-o ./.outputs/main-release.elf \
			-ldflags '-s' \
			-- \
			./sources/main.go \
	#
!!




<< go / execute / main / debug
	"${X_RUN[@]}" ':: go / build / main / debug'
	exec -- ./.outputs/main-debug.elf "${@}"
!!

<< go / execute / main / release
	"${X_RUN[@]}" ':: go / build / main / release'
	exec -- ./.outputs/main-release.elf "${@}"
!!




<< go / dependencies / update
	test "${#}" -eq 0
	exec -- "${X_RUN[@]}" ':: go / tool' \
			get \
			-v \
			-d \
			-- \
			./sources/... \
	#
!!




<< go / tool
	test "${#}" -ge 1
	test -d ./.outputs
	_outputs="$( exec -- readlink -e -- ./.outputs )"
	
	export -- GOPATH="${_outputs}/go"
	export -- GOBIN="${_outputs}/go/bin"
	export -- GOTMPDIR="${_outputs}/go/tmp"
	export -- GOCACHE="${_outputs}/go/cache"
	
	exec -- go "${@}"
!!




<< workspace / initialize / go
	test "${#}" -eq 0
	test -d ./.outputs
	_outputs="$( exec -- readlink -e -- ./.outputs )"
	_sources="$( exec -- readlink -e -- ./sources )"
	_vendor="$( exec -- readlink -e -- ./vendor )"
	
	GOPATH="${_outputs}/go"
	GOBIN="${_outputs}/go/bin"
	GOTMPDIR="${_outputs}/go/tmp"
	GOCACHE="${_outputs}/go/cache"
	
	for _folder in "${GOPATH}" "${GOBIN}" "${GOTMPDIR}" "${GOTMPDIR}" "${GOCACHE}" ; do
		if test ! -e "${_folder}" ; then
			mkdir -- "${_folder}"
		fi
	done
	
	if test ! -e "${GOPATH}/src" ; then
		ln -s -T -- "${_vendor}" "${GOPATH}/src"
	fi
!!




<< workspace / initialize / outputs
	test "${#}" -eq 0
	if test ! -d ./.outputs ; then
		_outputs_store="${TMPDIR:-/tmp}/go--${UID}--${RANDOM}-${RANDOM}-${RANDOM}-${RANDOM}"
		mkdir -- "${_outputs_store}"
		_outputs_store="$( exec -- readlink -e -- "${_outputs_store}" )"
		ln -s -f -T -- "${_outputs_store}" ./.outputs
	fi
!!




<< workspace / sources / codes / duplicates
	test "${#}" -eq 0
	exec -- xargs \
			-r -d '\n' -I {} \
			-a <(
				grep \
						-o \
						-P \
						-e '(?<=\[)[0-9a-f]{8}(?=\])|(?<=0x)[0-9a-f]{8}(?=[^0-9a-zA-Z]|$)' \
						-h \
						-r ./sources \
						--include '*.go' \
				| sort \
				| uniq -d
			) \
			-- \
		grep \
			-P \
			-e '(?<=\[){}(?=\])|(?<=0x){}(?=[^0-9a-zA-Z]|$)' \
			-r ./sources \
			-n \
			--include '*.go' \
			--color \
	#
!!




:: dummy / sleep / 30s :: test "${#}" -eq 0 ; sleep -- 30s
:: dummy / sleep / 1h :: test "${#}" -eq 0 ; sleep -- 1h

:: dummy / sleep / loop :: printf -- '.' ; sleep -- 1s ; exec -- "${X_RUN[@]}" ':: dummy / sleep / loop' "${@}"
:: dummy / sleep / bomb :: printf -- '.' ; sleep -- 1s ;         "${X_RUN[@]}" ':: dummy / sleep / bomb' "${@}"

:: dummy / env :: test "${#}" -eq 0 ; tr '\0' '\n' < "/proc/${$}/environ"
:: dummy / env / loop :: printf -- '--------\n' ; tr '\0' '\n' < "/proc/${$}/environ" ; sleep 1s ; exec -- "${X_RUN[@]}" ':: dummy / env / loop' "${@}"
:: dummy / env / bomb :: printf -- '--------\n' ; tr '\0' '\n' < "/proc/${$}/environ" ; sleep 1s ;         "${X_RUN[@]}" ':: dummy / env / bomb' "${@}"

:: dummy / lsof :: test "${#}" -eq 0 ; lsof -p "${$}" -w
:: dummy / lsof / loop :: printf -- '--------\n' ; lsof -p "${$}" -w ; sleep -- 1s ; exec -- "${X_RUN[@]}" ':: dummy / lsof / loop' "${@}"
:: dummy / lsof / bomb :: printf -- '--------\n' ; lsof -p "${$}" -w ; sleep -- 1s ;         "${X_RUN[@]}" ':: dummy / lsof / bomb' "${@}"

:: dummy / touch :: test "${#}" -eq 0 ; touch -- ./.x-run
:: dummy / touch / loop :: printf -- '.' ; touch -- ./.x-run ; sleep 1s ; exec -- "${X_RUN[@]}" ':: dummy / touch / loop' "${@}"
:: dummy / touch / bomb :: printf -- '.' ; touch -- ./.x-run ; sleep 1s ;         "${X_RUN[@]}" ':: dummy / touch / bomb' "${@}"

:: dummy / true :: exec -- true "${@}"
:: dummy / false :: exec -- false "${@}"

