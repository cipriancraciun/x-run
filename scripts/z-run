#!/dev/null




::// *

::// do / run / ...
::// do / use / ...

::// go / ...

::// deploy / ...
::// workspace / ...




:: deploy / rsync / linux :: exec "${ZRUN[@]}" ':: deploy / rsync' linux "${@}"
:: deploy / rsync / darwin :: exec "${ZRUN[@]}" ':: deploy / rsync' darwin "${@}"
:: deploy / rsync / freebsd :: exec "${ZRUN[@]}" ':: deploy / rsync' freebsd "${@}"
:: deploy / rsync / openbsd :: exec "${ZRUN[@]}" ':: deploy / rsync' openbsd "${@}"
--<< deploy / rsync
	test "${#}" -eq 2
	_os="${1}"
	_target="${2}"
	shift -- 2
	"${ZRUN[@]}" ':: deploy / release' "${_os}"
	_source="./.outputs/z-run--release--${_os}"
	printf -- '[ii]  deploying (`%s`) to `%s`...\n' "${_os}" "${_target}" >&2
	rsync -i -t -p --chmod=0555 -- "${_source}" "${_target}"
!!


<< deploy / publish
	test "${#}" -eq 0
	test -d ./.publish/
	"${ZRUN[@]}" ':: deploy / release'
	_build_version="$( exec -- cat -- ./sources/embedded/build-version.txt )"
	printf -- '[ii]  publishing `%s`...\n' "${_build_version}" >&2
	if test -e "./.publish/linux/z-run--linux--v${_build_version}" -o -e "./.publish/darwin/z-run--darwin--v${_build_version}" ; then
		printf -- '[ee]  release already exists!\n' >&2
		exit -- 1
	fi
	rsync -i -t -p --chmod=0555 -- ./.outputs/z-run--release--linux "./.publish/linux/z-run--linux--v${_build_version}"
	rsync -i -t -p --chmod=0555 -- ./.outputs/z-run--release--darwin "./.publish/darwin/z-run--darwin--v${_build_version}"
	rsync -i -t -p --chmod=0555 -- ./.outputs/z-run--release--freebsd "./.publish/freebsd/z-run--freebsd--v${_build_version}"
	rsync -i -t -p --chmod=0555 -- ./.outputs/z-run--release--openbsd "./.publish/openbsd/z-run--openbsd--v${_build_version}"
	ln -s -T -f -- "./z-run--linux--v${_build_version}" ./.publish/linux/z-run
	ln -s -T -f -- "./z-run--darwin--v${_build_version}" ./.publish/darwin/z-run
	ln -s -T -f -- "./z-run--freebsd--v${_build_version}" ./.publish/freebsd/z-run
	ln -s -T -f -- "./z-run--openbsd--v${_build_version}" ./.publish/openbsd/z-run
!!


<< deploy / release
	if test "${#}" -ge 1 ; then
		_os="${1}"
		shift -- 1
	else
		_os='all'
	fi
	test "${#}" -eq 0
	if test "${ZRUNDEV_NORELEASE:-}" == true ; then
		exit -- 0
	fi
	case "${_os}" in
		( all | linux )
			"${ZRUN[@]}" ':: go / build / main / release / linux'
		;;&
		( all | darwin )
			"${ZRUN[@]}" ':: go / build / main / release / darwin'
		;;&
		( all | freebsd )
			"${ZRUN[@]}" ':: go / build / main / release / freebsd'
		;;&
		( all | openbsd )
			"${ZRUN[@]}" ':: go / build / main / release / openbsd'
		;;&
		( all | linux | darwin | freebsd | openbsd )
		;;
		( * )
			printf -- '[ee]  invalid os `%s`;  aborting!\n' "${_os}" >&2
		;;
	esac
!!




--<< do / run / 0
	"${ZRUN[@]}" ':: go / build / main / debug'
	test "${#}" -ge 1
	export -n -- \
			ZRUN_LIBRARY_SOURCE= \
			ZRUN_LIBRARY_URL= \
			ZRUN_LIBRARY_FINGERPRINT= \
			ZRUN_EXECUTABLE= \
			ZRUN_WORKSPACE= \
			ZRUN_CACHE= \
	#
	if test -n "${ZRUNDEV_USE:-}" ; then
		export -- ZRUN_LIBRARY_SOURCE="${ZRUNDEV_USE}"
	else
		export -- ZRUN_LIBRARY_SOURCE="./examples/syntax.z-run"
	fi
	export -n -- ZRUNDEV_USE=
	if test -n "${ZRUNDEV_TERM:-}" ; then
		export -- TERM="${ZRUNDEV_TERM}"
	fi
	export -n -- ZRUNDEV_TERM=
	exec -a "${1:-./.outputs/z-run--debug}" -- ./.outputs/z-run--debug "${@:2}"
!!

<< do / run
	exec -- "${ZRUN[@]}" ':: do / run / 0' '' "${@}"
!!


:: do / run / execute :: exec -- "${ZRUN[@]}" ':: do / run' execute-scriptlet "${@}"
:: do / run / select-label :: exec -- "${ZRUN[@]}" ':: do / run' select-export-scriptlet-label "${@}"
:: do / run / select-body :: exec -- "${ZRUN[@]}" ':: do / run' select-export-scriptlet-body "${@}"
:: do / run / list-labels :: exec -- "${ZRUN[@]}" ':: do / run' export-scriptlet-labels "${@}"
:: do / run / parse-library :: exec -- "${ZRUN[@]}" ':: do / run' parse-library "${@}"
:: do / run / export-library-json :: exec -- "${ZRUN[@]}" ':: do / run' export-library-json "${@}"
:: do / run / export-library-cdb :: exec -- "${ZRUN[@]}" ':: do / run' export-library-cdb "${@}"
:: do / run / select :: exec -- "${ZRUN[@]}" ':: do / run / 0' '[z-run:select]' "${@}"


:: do / use / workspace :: export -- ZRUNDEV_USE=./.z-run
:: do / use / syntax :: export -- ZRUNDEV_USE=./examples/syntax.z-run

:: do / use / term / enable :: export -- ZRUNDEV_TERM="${TERM}"
:: do / use / term / disable :: export -- ZRUNDEV_TERM=dumb




<< go / build / main / debug
	
	test "${#}" -eq 0
	"${ZRUN[@]}" ':: workspace / sources / embedded / prepare'
	_outputs="$( exec -- readlink -e -- ./.outputs )"
	
	_build_target=development
	_build_git_hash="$( exec -- cat -- ./.outputs/markers/build-git-hash.txt )"
	
	_tags=(
			netgo
		)
	_gcflags=(
			-N
			-l
		)
	_ldflags=(
			-X "github.com/cipriancraciun/z-run/lib.BUILD_TARGET=${_build_target}"
			-X "github.com/cipriancraciun/z-run/lib.BUILD_GIT_HASH=${_build_git_hash}"
		)
	
	_tags="$( printf -- '%s,' "${_tags[@]}" )"
	_gcflags="$( printf -- '%s ' "${_gcflags[@]}" )"
	_ldflags="$( printf -- '%s ' "${_ldflags[@]}" )"
	
	exec -- "${ZRUN[@]}" ':: go / tool' \
			build \
			-o "${_outputs}/z-run--debug" \
			-tags "${_tags}" \
			-gcflags "${_gcflags}" \
			-ldflags "${_ldflags}" \
			-- \
			./cmd/z-run.go \
	#
!!

<< go / build / main / release
	
	test "${#}" -eq 0
	"${ZRUN[@]}" ':: workspace / sources / embedded / prepare'
	_outputs="$( exec -- readlink -e -- ./.outputs )"
	
	_build_target=release
	_build_git_hash="$( exec -- cat -- ./.outputs/markers/build-git-hash.txt )"
	
	_tags=(
			netgo
		)
	_gcflags=()
	_ldflags=(
			all=-s
			-X "github.com/cipriancraciun/z-run/lib.BUILD_TARGET=${_build_target}"
			-X "github.com/cipriancraciun/z-run/lib.BUILD_GIT_HASH=${_build_git_hash}"
		)
	
	_tags="$( printf -- '%s,' "${_tags[@]}" )"
	_gcflags="$( printf -- '%s ' "${_gcflags[@]}" )"
	_ldflags="$( printf -- '%s ' "${_ldflags[@]}" )"
	
	if test -n "${GOOS:-}" ; then
		_suffix="--${GOOS}"
	else
		_suffix=''
	fi
	
	printf -- '[ii]  building release for `%s`...\n' "${GOOS:-native}" >&2
	
	if test -f "${_outputs}/z-run--release${_suffix}" ; then
		mv -T -- "${_outputs}/z-run--release${_suffix}" "${_outputs}/z-run--release${_suffix}.old"
	fi
	
	"${ZRUN[@]}" ':: go / tool' \
			build \
			-o "${_outputs}/z-run--release${_suffix}.new" \
			-a \
			-tags "${_tags}" \
			-gcflags "${_gcflags}" \
			-ldflags "${_ldflags}" \
			-buildmode exe \
			-trimpath \
			-- \
			./cmd/z-run.go \
	#
	
	if test ! -e "${_outputs}/z-run--release${_suffix}.old" ; then
		mv -T -- "${_outputs}/z-run--release${_suffix}.new" "${_outputs}/z-run--release${_suffix}"
	elif ! cmp -s -- "${_outputs}/z-run--release${_suffix}.new" "${_outputs}/z-run--release${_suffix}.old" ; then
		mv -T -- "${_outputs}/z-run--release${_suffix}.new" "${_outputs}/z-run--release${_suffix}"
	else
		mv -T -- "${_outputs}/z-run--release${_suffix}.old" "${_outputs}/z-run--release${_suffix}"
		rm -- "${_outputs}/z-run--release${_suffix}.new"
	fi
!!

<< go / build / main / release / linux
	export -- GOOS=linux
	"${ZRUN[@]}" ':: go / build / main / release'
!!

<< go / build / main / release / darwin
	export -- GOOS=darwin
	"${ZRUN[@]}" ':: go / build / main / release'
!!

<< go / build / main / release / freebsd
	export -- GOOS=freebsd
	"${ZRUN[@]}" ':: go / build / main / release'
!!

<< go / build / main / release / openbsd
	export -- GOOS=openbsd
	"${ZRUN[@]}" ':: go / build / main / release'
!!




<< go / execute / main / debug
	"${ZRUN[@]}" ':: go / build / main / debug'
	export -n -- \
			ZRUN_LIBRARY_SOURCE= \
			ZRUN_LIBRARY_URL= \
			ZRUN_LIBRARY_FINGERPRINT= \
			ZRUN_EXECUTABLE= \
			ZRUN_WORKSPACE= \
			ZRUN_CACHE= \
	#
	exec -- ./.outputs/z-run--debug "${@}"
!!

<< go / execute / main / release
	"${ZRUN[@]}" ':: go / build / main / release'
	export -n -- \
			ZRUN_LIBRARY_SOURCE= \
			ZRUN_LIBRARY_URL= \
			ZRUN_LIBRARY_FINGERPRINT= \
			ZRUN_EXECUTABLE= \
			ZRUN_WORKSPACE= \
			ZRUN_CACHE= \
	#
	exec -- ./.outputs/z-run--release "${@}"
!!




<< go / dependencies / update
	test "${#}" -eq 0
	exec -- "${ZRUN[@]}" ':: go / tool' \
			get \
			-v \
			-d \
			-u \
			-- \
			all \
	#
!!


<< go / dependencies / list
	test "${#}" -eq 0
	exec -- "${ZRUN[@]}" ':: go / tool' \
			list \
			-m \
			-- \
			all \
	#
!!


<< go / dependencies / tidy
	test "${#}" -eq 0
	exec -- "${ZRUN[@]}" ':: go / tool' \
			mod tidy -v \
	#
!!


<< go / dependencies / vendor
	test "${#}" -eq 0
	
	if test -e ./vendors ; then
		rm -- ./sources/vendor
		mv -T -- ./vendors ./sources/vendor
	fi
	
	"${ZRUN[@]}" ':: go / tool' \
			mod vendor \
	#
	
	find ./sources/vendor/ \
			-xdev \
			-not -type d \
			-not -path './sources/vendor/modules.txt' \
			-not -name 'go.mod' \
			-not -name 'go.sum' \
			-not -name '*.go' \
			-not -name '*.c' \
			-not -name '*.h' \
			-not -name '*.s' \
			-delete \
	#
	find ./sources/vendor/ \
			-xdev \
			-type d \
			-empty \
			-delete \
	#
	
	mv -T -- ./sources/vendor ./vendors
	ln -s -T -- ../vendors ./sources/vendor
!!




<< go / tool
	test "${#}" -ge 1
	_outputs="$( exec -- readlink -e -- ./.outputs )"
	_sources="$( exec -- readlink -e -- ./sources )"
	
	export -- GOPATH="${_outputs}/go"
	export -- GOBIN="${_outputs}/go/bin"
	export -- GOTMPDIR="${_outputs}/go/tmp"
	export -- GOCACHE="${_outputs}/go/cache"
	
	if test -e "${_outputs}/go-tool" ; then
		_go="$( exec -- readlink -e -- "${_outputs}/go-tool" )"
	else
		_go="$( type -P -- go )"
	fi
	
	cd -- "${_sources}"
	
	exec -- "${_go}" "${@}"
!!




<< workspace / initialize / go
	test "${#}" -eq 0
	_outputs="$( exec -- readlink -e -- ./.outputs )"
	_sources="$( exec -- readlink -e -- ./sources )"
	
	GOPATH="${_outputs}/go"
	GOBIN="${_outputs}/go/bin"
	GOTMPDIR="${_outputs}/go/tmp"
	GOCACHE="${_outputs}/go/cache"
	_gosrc="${_outputs}/go/src"
	_gopkg="${_outputs}/go/pkg"
	_markers="${_outputs}/markers"
	
	for _folder in "${GOPATH}" "${GOBIN}" "${GOTMPDIR}" "${GOTMPDIR}" "${GOCACHE}" "${_gosrc}" "${_gopkg}" "${_markers}" ; do
		if test ! -e "${_folder}" ; then
			mkdir -- "${_folder}"
		fi
	done
!!




<< workspace / initialize / outputs
	test "${#}" -eq 0
	if test ! -d ./.outputs ; then
		_outputs_store="${TMPDIR:-/tmp}/z-run--${UID}--${RANDOM}-${RANDOM}-${RANDOM}-${RANDOM}"
		mkdir -- "${_outputs_store}"
		_outputs_store="$( exec -- readlink -e -- "${_outputs_store}" )"
		ln -s -f -T -- "${_outputs_store}" ./.outputs
	fi
!!




<< workspace / sources / codes / duplicates
	test "${#}" -eq 0
	exec -- xargs \
			-r -d '\n' -I {} \
			-a <(
				grep \
						-o \
						-P \
						-e '(?<=\[)[0-9a-f]{8}(?=\])|(?<=0x)[0-9a-f]{8}(?=[^0-9a-zA-Z]|$)' \
						-h \
						-r ./sources \
						--include '*.go' \
				| sort \
				| uniq -d
			) \
			-- \
		grep \
			-P \
			-e '(?<=\[){}(?=\])|(?<=0x){}(?=[^0-9a-zA-Z]|$)' \
			-r ./sources \
			-n \
			--include '*.go' \
			--color \
	#
!!




<< workspace / sources / embedded / prepare
	
	test "${#}" -eq 0
	
	if ! cmp -s -- ./documentation/manual/z-run.1.txt ./sources/embedded/manual.txt ; then
		cp -T -- ./documentation/manual/z-run.1.txt ./sources/embedded/manual.txt
	fi
	
	"${ZRUN[@]}" ':: workspace / sources / embedded / hash'
!!




<< workspace / sources / embedded / hash
	
	find ./sources/ \
			-type f \
			-not -path './sources/embedded/build-*.txt' \
			-print0 \
	| xargs -0 -I {} -- md5sum -b -z -- {} \
	| LC_ALL=C sort -z \
	| md5sum -b \
	| cut -f 1 -d ' ' \
		>| ./.outputs/markers/build-sources-md5.tmp \
	#
	
	if ! cmp -s -- ./.outputs/markers/build-sources-md5.tmp ./sources/embedded/build-sources-md5.txt ; then
		
		_build_number="$( exec -- cat -- ./sources/embedded/build-number.txt )"
		_build_number="$(( _build_number + 1 ))"
		_build_timestamp="$( exec -- date -- '+%Y-%m-%d-%H-%M-%S' )"
		
		printf -- '%d\n' "${_build_number}" >| ./sources/embedded/build-number.tmp
		mv -T -- ./sources/embedded/build-number.tmp ./sources/embedded/build-number.txt
		printf -- '%s\n' "${_build_timestamp}" >| ./sources/embedded/build-timestamp.tmp
		mv -T -- ./sources/embedded/build-timestamp.tmp ./sources/embedded/build-timestamp.txt
		
		mv -T -- ./.outputs/markers/build-sources-md5.tmp ./sources/embedded/build-sources-md5.txt
		
	else
		
		rm -- ./.outputs/markers/build-sources-md5.tmp
	fi
	
	if test -e ./.git ; then
		_git_hash="$( exec -- git rev-parse HEAD )"
		if ! git diff --quiet || ! git diff --quiet --cached ; then
			_git_hash+="-uncommitted"
		fi
	else
		_git_hash='unknown'
	fi
	
	printf -- '%s\n' "${_git_hash}" >| ./.outputs/markers/build-git-hash.tmp
	mv -T -- ./.outputs/markers/build-git-hash.tmp ./.outputs/markers/build-git-hash.txt
!!




&&?? _/.local.z-run

