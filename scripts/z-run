#!/dev/null




::// *

::// do / run / ...
::// do / use / ...

::// go / ...

::// deploy / ...
::// workspace / ...




<< deploy / rsync / linux
	test "${#}" -eq 1
	_target="${1}"
	shift -- 1
	"${ZRUN[@]}" ':: deploy / release'
	printf -- '[ii]  deploying to `%s`...\n' "${_target}" >&2
	rsync -i -t -p --chmod=0555 -- ./.outputs/z-run--release--linux "${_target}"
!!

<< deploy / rsync / darwin
	test "${#}" -eq 1
	_target="${1}"
	shift -- 1
	"${ZRUN[@]}" ':: deploy / release'
	printf -- '[ii]  deploying to `%s`...\n' "${_target}" >&2
	rsync -i -t -p --chmod=0555 -- ./.outputs/z-run--release--darwin "${_target}"
!!


<< deploy / publish
	test "${#}" -eq 0
	test -d ./.publish/
	"${ZRUN[@]}" ':: deploy / release'
	_build_version="$( exec -- cat -- ./scripts/build/build-version.txt )"
	printf -- '[ii]  publishing `%s`...\n' "${_build_version}" >&2
	if test -e "./.publish/linux/z-run--linux--v${_build_version}" -o -e "./.publish/darwin/z-run--darwin--v${_build_version}" ; then
		printf -- '[ee]  release already exists!\n' >&2
		exit -- 1
	fi
	rsync -i -t -p --chmod=0555 -- ./.outputs/z-run--release--linux "./.publish/linux/z-run--linux--v${_build_version}"
	rsync -i -t -p --chmod=0555 -- ./.outputs/z-run--release--darwin "./.publish/darwin/z-run--darwin--v${_build_version}"
	ln -s -T -f -- "./z-run--linux--v${_build_version}" ./.publish/linux/z-run
	ln -s -T -f -- "./z-run--darwin--v${_build_version}" ./.publish/darwin/z-run
!!


<< deploy / release
	test "${#}" -eq 0
	if test "${ZRUNDEV_NORELEASE:-}" == true ; then
		exit -- 0
	fi
	"${ZRUN[@]}" ':: go / build / main / release / linux'
	"${ZRUN[@]}" ':: go / build / main / release / darwin'
!!




--<< do / run / 0
	"${ZRUN[@]}" ':: go / build / main / debug'
	test "${#}" -ge 1
	export -n -- \
			ZRUN_LIBRARY_SOURCE= \
			ZRUN_LIBRARY_URL= \
			ZRUN_LIBRARY_FINGERPRINT= \
			ZRUN_EXECUTABLE= \
			ZRUN_WORKSPACE= \
			ZRUN_CACHE= \
	#
	if test -n "${ZRUNDEV_USE:-}" ; then
		export -- ZRUN_LIBRARY_SOURCE="${ZRUNDEV_USE}"
	else
		export -- ZRUN_LIBRARY_SOURCE="./examples/syntax.z-run"
	fi
	export -n -- ZRUNDEV_USE=
	if test -n "${ZRUNDEV_TERM:-}" ; then
		export -- TERM="${ZRUNDEV_TERM}"
	fi
	export -n -- ZRUNDEV_TERM=
	exec -a "${1:-./.outputs/z-run--debug}" -- ./.outputs/z-run--debug "${@:2}"
!!

<< do / run
	exec -- "${ZRUN[@]}" ':: do / run / 0' '' "${@}"
!!


:: do / run / execute :: exec -- "${ZRUN[@]}" ':: do / run' execute-scriptlet "${@}"
:: do / run / select-label :: exec -- "${ZRUN[@]}" ':: do / run' select-export-scriptlet-label "${@}"
:: do / run / select-body :: exec -- "${ZRUN[@]}" ':: do / run' select-export-scriptlet-body "${@}"
:: do / run / list-labels :: exec -- "${ZRUN[@]}" ':: do / run' export-scriptlet-labels "${@}"
:: do / run / parse-library :: exec -- "${ZRUN[@]}" ':: do / run' parse-library "${@}"
:: do / run / export-library-json :: exec -- "${ZRUN[@]}" ':: do / run' export-library-json "${@}"
:: do / run / export-library-cdb :: exec -- "${ZRUN[@]}" ':: do / run' export-library-cdb "${@}"
:: do / run / select :: exec -- "${ZRUN[@]}" ':: do / run / 0' '[z-run:select]' "${@}"


:: do / use / workspace :: export -- ZRUNDEV_USE=./.z-run
:: do / use / syntax :: export -- ZRUNDEV_USE=./examples/syntax.z-run

:: do / use / term / enable :: export -- ZRUNDEV_TERM="${TERM}"
:: do / use / term / disable :: export -- ZRUNDEV_TERM=dumb




<< go / build / main / debug
	
	test "${#}" -eq 0
	"${ZRUN[@]}" ':: workspace / sources / embedded / build'
	_outputs="$( exec -- readlink -e -- ./.outputs )"
	
	_build_target=development
	_build_version="$( exec -- cat -- ./scripts/build/build-version.txt )"
	_build_number="$( exec -- cat -- ./scripts/build/build-number.txt )"
	_build_timestamp="$( exec -- cat -- ./scripts/build/build-timestamp.txt )"
	_build_sources_md5="$( exec -- cat -- ./scripts/build/build-sources-md5.txt )"
	_build_git_hash="$( exec -- cat -- ./.outputs/markers/build-git-hash.txt )"
	
	_tags=()
	_ldflags=(
			-X "github.com/cipriancraciun/z-run/lib.BUILD_TARGET=${_build_target}"
			-X "github.com/cipriancraciun/z-run/lib.BUILD_VERSION=${_build_version}"
			-X "github.com/cipriancraciun/z-run/lib.BUILD_NUMBER=${_build_number}"
			-X "github.com/cipriancraciun/z-run/lib.BUILD_TIMESTAMP=${_build_timestamp}"
			-X "github.com/cipriancraciun/z-run/lib.BUILD_SOURCES_MD5=${_build_sources_md5}"
			-X "github.com/cipriancraciun/z-run/lib.BUILD_GIT_HASH=${_build_git_hash}"
		)
	
	_tags="$( printf -- '%s,' "${_tags[@]}" )"
	_ldflags="$( printf -- '%s ' "${_ldflags[@]}" )"
	
	exec -- "${ZRUN[@]}" ':: go / tool' \
			build \
			-o "${_outputs}/z-run--debug" \
			-tags "${_tags}" \
			-ldflags "${_ldflags}" \
			-- \
			./cmd/z-run.go \
	#
!!

<< go / build / main / release
	
	test "${#}" -eq 0
	"${ZRUN[@]}" ':: workspace / sources / embedded / build'
	_outputs="$( exec -- readlink -e -- ./.outputs )"
	
	_build_target=release
	_build_version="$( exec -- cat -- ./scripts/build/build-version.txt )"
	_build_number="$( exec -- cat -- ./scripts/build/build-number.txt )"
	_build_timestamp="$( exec -- cat -- ./scripts/build/build-timestamp.txt )"
	_build_sources_md5="$( exec -- cat -- ./scripts/build/build-sources-md5.txt )"
	_build_git_hash="$( exec -- cat -- ./.outputs/markers/build-git-hash.txt )"
	
	_tags=(
			netgo
		)
	_ldflags=(
			all=-s
			-X "github.com/cipriancraciun/z-run/lib.BUILD_TARGET=${_build_target}"
			-X "github.com/cipriancraciun/z-run/lib.BUILD_VERSION=${_build_version}"
			-X "github.com/cipriancraciun/z-run/lib.BUILD_NUMBER=${_build_number}"
			-X "github.com/cipriancraciun/z-run/lib.BUILD_TIMESTAMP=${_build_timestamp}"
			-X "github.com/cipriancraciun/z-run/lib.BUILD_SOURCES_MD5=${_build_sources_md5}"
			-X "github.com/cipriancraciun/z-run/lib.BUILD_GIT_HASH=${_build_git_hash}"
		)
	
	_tags="$( printf -- '%s,' "${_tags[@]}" )"
	_ldflags="$( printf -- '%s ' "${_ldflags[@]}" )"
	
	if test -n "${GOOS:-}" ; then
		_suffix="--${GOOS}"
	else
		_suffix=''
	fi
	
	printf -- '[ii]  building release for `%s`...\n' "${GOOS:-native}" >&2
	
	if test -f "${_outputs}/z-run--release${_suffix}" ; then
		mv -T -- "${_outputs}/z-run--release${_suffix}" "${_outputs}/z-run--release${_suffix}.old"
	fi
	
	"${ZRUN[@]}" ':: go / tool' \
			build \
			-o "${_outputs}/z-run--release${_suffix}.new" \
			-tags "${_tags}" \
			-ldflags "${_ldflags}" \
			-- \
			./cmd/z-run.go \
	#
	
	if test ! -e "${_outputs}/z-run--release${_suffix}.old" ; then
		mv -T -- "${_outputs}/z-run--release${_suffix}.new" "${_outputs}/z-run--release${_suffix}"
	elif ! cmp -s -- "${_outputs}/z-run--release${_suffix}.new" "${_outputs}/z-run--release${_suffix}.old" ; then
		mv -T -- "${_outputs}/z-run--release${_suffix}.new" "${_outputs}/z-run--release${_suffix}"
	else
		mv -T -- "${_outputs}/z-run--release${_suffix}.old" "${_outputs}/z-run--release${_suffix}"
		rm -- "${_outputs}/z-run--release${_suffix}.new"
	fi
!!

<< go / build / main / release / linux
	export -- GOOS=linux
	"${ZRUN[@]}" ':: go / build / main / release'
!!

<< go / build / main / release / darwin
	export -- GOOS=darwin
	"${ZRUN[@]}" ':: go / build / main / release'
!!




<< go / execute / main / debug
	"${ZRUN[@]}" ':: go / build / main / debug'
	export -n -- \
			ZRUN_LIBRARY_SOURCE= \
			ZRUN_LIBRARY_URL= \
			ZRUN_LIBRARY_FINGERPRINT= \
			ZRUN_EXECUTABLE= \
			ZRUN_WORKSPACE= \
			ZRUN_CACHE= \
	#
	exec -- ./.outputs/z-run--debug "${@}"
!!

<< go / execute / main / release
	"${ZRUN[@]}" ':: go / build / main / release'
	export -n -- \
			ZRUN_LIBRARY_SOURCE= \
			ZRUN_LIBRARY_URL= \
			ZRUN_LIBRARY_FINGERPRINT= \
			ZRUN_EXECUTABLE= \
			ZRUN_WORKSPACE= \
			ZRUN_CACHE= \
	#
	exec -- ./.outputs/z-run--release "${@}"
!!




<< go / dependencies / update
	test "${#}" -eq 0
	exec -- "${ZRUN[@]}" ':: go / tool' \
			get \
			-v \
			-d \
			-u \
			-- \
			all \
	#
!!


<< go / dependencies / list
	test "${#}" -eq 0
	exec -- "${ZRUN[@]}" ':: go / tool' \
			list \
			-m \
			-- \
			all \
	#
!!


<< go / dependencies / tidy
	test "${#}" -eq 0
	exec -- "${ZRUN[@]}" ':: go / tool' \
			mod tidy \
	#
!!


<< go / dependencies / vendor
	test "${#}" -eq 0
	"${ZRUN[@]}" ':: go / tool' \
			mod vendor \
	#
	find ./sources/vendor/ \
			-xdev \
			-not -type d \
			-not -path './sources/vendor/modules.txt' \
			-not -name 'go.mod' \
			-not -name 'go.sum' \
			-not -name '*.go' \
			-not -name '*.c' \
			-not -name '*.h' \
			-not -name '*.s' \
			-delete \
	#
	find ./sources/vendor/ \
			-xdev \
			-type d \
			-empty \
			-delete \
	#
!!




<< go / tool
	test "${#}" -ge 1
	_outputs="$( exec -- readlink -e -- ./.outputs )"
	_sources="$( exec -- readlink -e -- ./sources )"
	
	export -- GOPATH="${_outputs}/go"
	export -- GOBIN="${_outputs}/go/bin"
	export -- GOTMPDIR="${_outputs}/go/tmp"
	export -- GOCACHE="${_outputs}/go/cache"
	
	if test -e "${_outputs}/go-tool" ; then
		_go="$( exec -- readlink -e -- "${_outputs}/go-tool" )"
	else
		_go="$( type -P -- go )"
	fi
	
	cd -- "${_sources}"
	
	exec -- "${_go}" "${@}"
!!




<< workspace / initialize / go
	test "${#}" -eq 0
	_outputs="$( exec -- readlink -e -- ./.outputs )"
	_sources="$( exec -- readlink -e -- ./sources )"
	
	GOPATH="${_outputs}/go"
	GOBIN="${_outputs}/go/bin"
	GOTMPDIR="${_outputs}/go/tmp"
	GOCACHE="${_outputs}/go/cache"
	_gosrc="${_outputs}/go/src"
	_gopkg="${_outputs}/go/pkg"
	_markers="${_outputs}/markers"
	_embedded="${_outputs}/embedded"
	
	for _folder in "${GOPATH}" "${GOBIN}" "${GOTMPDIR}" "${GOTMPDIR}" "${GOCACHE}" "${_gosrc}" "${_gopkg}" "${_markers}" "${_embedded}" ; do
		if test ! -e "${_folder}" ; then
			mkdir -- "${_folder}"
		fi
	done
!!




<< workspace / initialize / outputs
	test "${#}" -eq 0
	if test ! -d ./.outputs ; then
		_outputs_store="${TMPDIR:-/tmp}/z-run--${UID}--${RANDOM}-${RANDOM}-${RANDOM}-${RANDOM}"
		mkdir -- "${_outputs_store}"
		_outputs_store="$( exec -- readlink -e -- "${_outputs_store}" )"
		ln -s -f -T -- "${_outputs_store}" ./.outputs
	fi
!!




<< workspace / sources / codes / duplicates
	test "${#}" -eq 0
	exec -- xargs \
			-r -d '\n' -I {} \
			-a <(
				grep \
						-o \
						-P \
						-e '(?<=\[)[0-9a-f]{8}(?=\])|(?<=0x)[0-9a-f]{8}(?=[^0-9a-zA-Z]|$)' \
						-h \
						-r ./sources \
						--include '*.go' \
				| sort \
				| uniq -d
			) \
			-- \
		grep \
			-P \
			-e '(?<=\[){}(?=\])|(?<=0x){}(?=[^0-9a-zA-Z]|$)' \
			-r ./sources \
			-n \
			--include '*.go' \
			--color \
	#
!!




<< workspace / sources / embedded / build
	
	test "${#}" -eq 0
	
	"${ZRUN[@]}" ':: workspace / sources / embedded / process' ./sources/embedded/bash_prolog.bash ./.outputs/embedded/embedded_bash_prolog.go zrun embeddedBashProlog string
	"${ZRUN[@]}" ':: workspace / sources / embedded / process' ./sources/embedded/bash_prolog_0.bash ./.outputs/embedded/embedded_bash_prolog_0.go zrun embeddedBashProlog0 string
	"${ZRUN[@]}" ':: workspace / sources / embedded / process' ./sources/embedded/bash_shell_rc.bash ./.outputs/embedded/embedded_bash_shell_rc.go zrun embeddedBashShellRc string
	"${ZRUN[@]}" ':: workspace / sources / embedded / process' ./sources/embedded/bash_shell_functions.bash ./.outputs/embedded/embedded_bash_shell_functions.go zrun embeddedBashShellFunctions string
	"${ZRUN[@]}" ':: workspace / sources / embedded / process' ./sources/embedded/python3_prolog.py ./.outputs/embedded/embedded_python3_prolog.go zrun embeddedPython3Prolog string
	"${ZRUN[@]}" ':: workspace / sources / embedded / process' ./sources/embedded/go_prolog.go ./.outputs/embedded/embedded_go_prolog.go zrun embeddedGoProlog string
	"${ZRUN[@]}" ':: workspace / sources / embedded / process' ./documentation/manual/z-run.1.txt ./.outputs/embedded/embedded_manual_txt.go zrun embeddedManualTxt string
	
	if ! test \
			-e ./sources/embedded.go -a \
			./sources/embedded.go -nt ./.outputs/embedded/embedded_bash_prolog.go -a \
			./sources/embedded.go -nt ./.outputs/embedded/embedded_bash_prolog_0.go -a \
			./sources/embedded.go -nt ./.outputs/embedded/embedded_bash_shell_rc.go -a \
			./sources/embedded.go -nt ./.outputs/embedded/embedded_bash_shell_functions.go -a \
			./sources/embedded.go -nt ./.outputs/embedded/embedded_python3_prolog.go -a \
			./sources/embedded.go -nt ./.outputs/embedded/embedded_go_prolog.go -a \
			./sources/embedded.go -nt ./.outputs/embedded/embedded_manual_txt.go \
	; then
		sed \
				-r \
				-e '1ipackage zrun' \
				-e '/^package zrun$/d' \
				-- \
				./.outputs/embedded/embedded_bash_prolog.go \
				./.outputs/embedded/embedded_bash_prolog_0.go \
				./.outputs/embedded/embedded_bash_shell_rc.go \
				./.outputs/embedded/embedded_bash_shell_functions.go \
				./.outputs/embedded/embedded_python3_prolog.go \
				./.outputs/embedded/embedded_go_prolog.go \
				./.outputs/embedded/embedded_manual_txt.go \
			>| ./sources/embedded.go.tmp \
		#
		mv -T -- ./sources/embedded.go.tmp ./sources/embedded.go
	fi
	
	"${ZRUN[@]}" ':: workspace / sources / embedded / hash'
!!




<< workspace / sources / embedded / hash
	
	find ./sources/ -type f -print0 \
	| xargs -0 -I {} -- md5sum -b -z -- {} \
	| LC_ALL=C sort -z \
	| md5sum -b \
	| cut -f 1 -d ' ' \
		>| ./.outputs/markers/build-sources-md5.tmp \
	#
	
	if ! cmp -s -- ./.outputs/markers/build-sources-md5.tmp ./scripts/build/build-sources-md5.txt ; then
		
		_build_number="$( exec -- cat -- ./scripts/build/build-number.txt )"
		_build_number="$(( _build_number + 1 ))"
		_build_timestamp="$( exec -- date -- '+%Y-%m-%d-%H-%M-%S' )"
		
		printf -- '%d\n' "${_build_number}" >| ./scripts/build/build-number.tmp
		mv -T -- ./scripts/build/build-number.tmp ./scripts/build/build-number.txt
		printf -- '%s\n' "${_build_timestamp}" >| ./scripts/build/build-timestamp.tmp
		mv -T -- ./scripts/build/build-timestamp.tmp ./scripts/build/build-timestamp.txt
		
		mv -T -- ./.outputs/markers/build-sources-md5.tmp ./scripts/build/build-sources-md5.txt
		
	else
		
		rm -- ./.outputs/markers/build-sources-md5.tmp
	fi
	
	if test -e ./.git ; then
		_git_hash="$( exec -- git rev-parse HEAD )"
		if ! git diff --quiet || ! git diff --quiet --cached ; then
			_git_hash+="-uncommitted"
		fi
	else
		_git_hash='unknown'
	fi
	
	printf -- '%s\n' "${_git_hash}" >| ./.outputs/markers/build-git-hash.tmp
	mv -T -- ./.outputs/markers/build-git-hash.tmp ./.outputs/markers/build-git-hash.txt
!!




--<< workspace / sources / embedded / process
	
	test "${#}" -eq 5
	_input="${1}"
	_output="${2}"
	_package="${3}"
	_variable="${4}"
	_type="${5}"
	shift -- 5
	
	test "${#}" -eq 0
	
	if test -e "${_output}" -a "${_input}" -ot "${_output}" ; then
		exit -- 0
	fi
	
	test -f "${_input}"
	exec {_output_fd}>| "${_output}.tmp"
	
	if test "${_package}" != "" ; then
		printf -- '\n' >&"${_output_fd}"
		printf -- 'package %s\n' "${_package}" >&"${_output_fd}"
		printf -- '\n' >&"${_output_fd}"
	fi
	
	printf -- '\n' >&"${_output_fd}"
	case "${_type}" in
		( byte )
			printf -- 'var %s []byte = ([]byte {\n' "${_variable}" >&"${_output_fd}"
		;;
		( string )
			printf -- 'var %s string = string ([]byte {\n' "${_variable}" >&"${_output_fd}"
		;;
		( * )
			false -- "${_type}"
		;;
	esac
	
	xxd -i -c 256 < "${_input}" \
	| sed -r -e 's/^ +//' -e 's/[^,]$/\0,/' \
	| tr '\n' ' ' \
	| sed -r -e 's/ 0x0a,/\0\n/g' \
	| sed -r -e 's/^ */  /g' \
	| grep -v -E -e '^ *$' \
		>&"${_output_fd}"
	
	printf -- '})\n' >&"${_output_fd}"
	printf -- '\n' >&"${_output_fd}"
	
	mv -f -T -- "${_output}.tmp" "${_output}"
!!




&&?? _/.local.z-run

