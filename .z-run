#!/dev/null




<< workspace / deploy
	test "${#}" -eq 0
	"${ZRUN[@]}" ':: go / build / main / release'
	cp -f -- ./.outputs/main-release.elf "${HOME}/.bin/z-run-0"
!!




<< do / 0
	"${ZRUN[@]}" ':: go / build / main / debug'
	test "${#}" -ge 1
	export -n -- \
			X_RUN \
			X_RUN_COMMAND \
			X_RUN_COMMANDS \
			X_RUN_COMMANDS_CDB \
			X_RUN_ACTION \
			X_RUN_FILTER \
			X_RUN_INSIDE \
			X_RUN_TERM \
			X_RUN_TRACE \
			X_RUN_CLEAN \
			X_RUN_CACHE_IDENTITY \
	#
	export -n -- \
			ZRUN_LIBRARY_SOURCE \
			ZRUN_LIBRARY_CACHE \
			ZRUN_EXECUTABLE \
			ZRUN_CACHE \
			ZRUN_TERM \
	#
	if test -n "${ZRUNDEV_USE:-}" ; then
		export -- ZRUN_LIBRARY_SOURCE="${ZRUNDEV_USE:-}"
		export -n -- ZRUNDEV_USE
	fi
	exec -a "${1}" -- ./.outputs/main-debug.elf "${@:2}"
!!

<< do
	exec -- "${ZRUN[@]}" ':: do / 0' z-run "${@}"
!!


:: do / execute :: exec -- "${ZRUN[@]}" ':: do' execute "${@}"
:: do / script :: exec -- "${ZRUN[@]}" ':: do' export-script "${@}"
:: do / list :: exec -- "${ZRUN[@]}" ':: do' export-labels "${@}"
:: do / select :: exec -- "${ZRUN[@]}" ':: do' select-label "${@}"
:: do / export-json :: exec -- "${ZRUN[@]}" ':: do' export-library-json "${@}"
:: do / export-cdb :: exec -- "${ZRUN[@]}" ':: do' export-library-cdb "${@}"
:: do / parse :: exec -- "${ZRUN[@]}" ':: do' parse-library "${@}"
:: do / fzf :: exec -- "${ZRUN[@]}" ':: do / 0' '[z-run:select]' "${@}"


:: do / use / syntax :: export -- ZRUNDEV_USE=./examples/syntax.z-run
:: do / use / debug :: export -- ZRUNDEV_USE=./examples/debug.z-run
:: do / use / generators :: export -- ZRUNDEV_USE=./examples/generators.z-run
:: do / use / comments :: export -- ZRUNDEV_USE=./examples/comments.z-run
:: do / use / workspace :: export -- ZRUNDEV_USE=./.z-run

:: do / use / photos :: export -- ZRUNDEV_USE=./examples/photos.z-run
:: do / use / desktop :: export -- ZRUNDEV_USE=./examples/desktop.z-run
:: do / use / vonuvoli :: export -- ZRUNDEV_USE=./examples/vonuvoli.z-run




<< go / build / main / debug
	test "${#}" -eq 0
	exec -- "${ZRUN[@]}" ':: go / tool' \
			build \
			-v \
			-o ./.outputs/main-debug.elf \
			-- \
			./sources/main.go \
	#
!!

<< go / build / main / release
	test "${#}" -eq 0
	exec -- "${ZRUN[@]}" ':: go / tool' \
			build \
			-v \
			-o ./.outputs/main-release.elf \
			-ldflags '-s' \
			-- \
			./sources/main.go \
	#
!!




<< go / execute / main / debug
	"${ZRUN[@]}" ':: go / build / main / debug'
	exec -- ./.outputs/main-debug.elf "${@}"
!!

<< go / execute / main / release
	"${ZRUN[@]}" ':: go / build / main / release'
	exec -- ./.outputs/main-release.elf "${@}"
!!




<< go / dependencies / update
	test "${#}" -eq 0
	exec -- "${ZRUN[@]}" ':: go / tool' \
			get \
			-v \
			-d \
			-- \
			./sources/... \
	#
!!




<< go / tool
	test "${#}" -ge 1
	test -d ./.outputs
	_outputs="$( exec -- readlink -e -- ./.outputs )"
	
	export -- GOPATH="${_outputs}/go"
	export -- GOBIN="${_outputs}/go/bin"
	export -- GOTMPDIR="${_outputs}/go/tmp"
	export -- GOCACHE="${_outputs}/go/cache"
	
	exec -- go "${@}"
!!




<< workspace / initialize / go
	test "${#}" -eq 0
	test -d ./.outputs
	_outputs="$( exec -- readlink -e -- ./.outputs )"
	_sources="$( exec -- readlink -e -- ./sources )"
	_vendor="$( exec -- readlink -e -- ./vendor )"
	
	GOPATH="${_outputs}/go"
	GOBIN="${_outputs}/go/bin"
	GOTMPDIR="${_outputs}/go/tmp"
	GOCACHE="${_outputs}/go/cache"
	
	for _folder in "${GOPATH}" "${GOBIN}" "${GOTMPDIR}" "${GOTMPDIR}" "${GOCACHE}" ; do
		if test ! -e "${_folder}" ; then
			mkdir -- "${_folder}"
		fi
	done
	
	if test ! -e "${GOPATH}/src" ; then
		ln -s -T -- "${_vendor}" "${GOPATH}/src"
	fi
!!




<< workspace / initialize / outputs
	test "${#}" -eq 0
	if test ! -d ./.outputs ; then
		_outputs_store="${TMPDIR:-/tmp}/go--${UID}--${RANDOM}-${RANDOM}-${RANDOM}-${RANDOM}"
		mkdir -- "${_outputs_store}"
		_outputs_store="$( exec -- readlink -e -- "${_outputs_store}" )"
		ln -s -f -T -- "${_outputs_store}" ./.outputs
	fi
!!




<< workspace / sources / codes / duplicates
	test "${#}" -eq 0
	exec -- xargs \
			-r -d '\n' -I {} \
			-a <(
				grep \
						-o \
						-P \
						-e '(?<=\[)[0-9a-f]{8}(?=\])|(?<=0x)[0-9a-f]{8}(?=[^0-9a-zA-Z]|$)' \
						-h \
						-r ./sources \
						--include '*.go' \
				| sort \
				| uniq -d
			) \
			-- \
		grep \
			-P \
			-e '(?<=\[){}(?=\])|(?<=0x){}(?=[^0-9a-zA-Z]|$)' \
			-r ./sources \
			-n \
			--include '*.go' \
			--color \
	#
!!

